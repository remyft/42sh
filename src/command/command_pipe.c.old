/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   command_pipe.c                                     :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: gbourgeo <gbourgeo@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2019/02/09 06:58:04 by gbourgeo          #+#    #+#             */
/*   Updated: 2019/02/09 13:09:51 by gbourgeo         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include <sys/wait.h>
#include "libft.h"
#include "ft_dprintf.h"
#include "command.h"
#include "shell_lib.h"
#include "shell_env.h"

static int		command_pipe_error(const char *err, t_s_env *e)
{
	ft_dprintf(STDERR_FILENO, "%s: %s failed\n",e->progname, err);
	if (e->forked)
		exit(EXIT_FAILURE);
	return (1);
}

static int		command_pipe_father(pid_t pid, int pfd[2], void *cmd, t_s_env *e)
{
	// t_s_env		newe;
	int			ret;

	// ft_memcpy(&newe, e, sizeof(newe));
	// newe.public_env = sh_tabdup((const char **)e->public_env);
	// newe.forked = 1;
	// newe.last_pipe = *(int *)((t_pipeline *)cmd)->right == IS_A_COMMAND;
	close(pfd[0]);
	dup2(pfd[1], STDOUT_FILENO);
	close(pfd[1]);
	ret = command_parse(((t_pipeline *)cmd)->left, e);
	// ft_dprintf(2,"Father wait %ld\n", pid);
	// waitpid(pid, &ret, 0);
	sh_freetab(&e->public_env);
	(void)pid;
	exit(ret);
}

static int		command_pipe_child(int pfd[2], void *cmd, t_s_env *e)
{
	// t_s_env		newe;
	int			ret;

	// ft_memcpy(&newe, e, sizeof(newe));
	// newe.public_env = sh_tabdup((const char **)e->public_env);
	// newe.forked = 1;
	// newe.last_pipe = 1;
	e->forked = 1;
	close(pfd[1]);
	dup2(pfd[0], STDIN_FILENO);
	close(pfd[0]);
	// ft_dprintf(2,"child %d\n",getpid());
	ret = command_parse(((t_pipeline *)cmd)->right, e);
	sh_freetab(&e->public_env);
	// sh_freetab(&newe.public_env);
	exit(ret);
}

int				command_pipe(void *cmd, t_s_env *e)
{
	t_s_env		newe;
	pid_t		pid;
	pid_t		pic;
	int			pfd[2];

	ft_memcpy(&newe, e, sizeof(newe));
	newe.public_env = sh_tabdup((const char **)e->public_env);
	newe.forked = 1;
	pid = 0;
	// if (!((t_pipeline *)cmd)->left || !((t_pipeline *)cmd)->right)
	// 	return (0);
	if (pipe(pfd) < 0)
		command_pipe_error("pipe", e);
	if (*(int *)((t_pipeline *)cmd)->right == IS_A_PIPE)
		command_pipe(((t_pipeline *)cmd)->right, &newe);
	// if (!e->forked && (pid = fork()) < 0)
	// 	return (command_pipe_error("fork", e));
	// if (pid == 0)
	// {
	if ((pid = fork()) < 0)
		return (command_pipe_error("fork", e));
	else if (pid == 0)
		command_pipe_child(pfd, cmd, &newe);
	if ((pic = fork()) < 0)
		return (command_pipe_error("fork", e));
	else if (pic == 0)
		command_pipe_father(pic, pfd, cmd, e);
	// close(pfd[0]);
	// close(pfd[1]);
	waitpid(pid, &e->ret, 0);
	// }
	// ft_dprintf(2,"Main wait %d\n",pid);
	ft_dprintf(1,"ret:%d\n",e->ret);
	return (0);
}
